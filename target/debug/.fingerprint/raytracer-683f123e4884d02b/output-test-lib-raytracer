{"message":"unused import: `min`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\matrix.rs","byte_start":54,"byte_end":57,"line_start":2,"line_end":2,"column_start":16,"column_end":19,"is_primary":true,"text":[{"text":"use std::cmp::{min, PartialEq};","highlight_start":16,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src\\matrix.rs","byte_start":54,"byte_end":59,"line_start":2,"line_end":2,"column_start":16,"column_end":21,"is_primary":true,"text":[{"text":"use std::cmp::{min, PartialEq};","highlight_start":16,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `min`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\matrix.rs:2:16\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::cmp::{min, PartialEq};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"cannot subtract `matrix::Matrix` from `matrix::Matrix`","code":{"code":"E0369","explanation":"A binary operation was attempted on a type which doesn't support it.\n\nErroneous code example:\n\n```compile_fail,E0369\nlet x = 12f32; // error: binary operation `<<` cannot be applied to\n               //        type `f32`\n\nx << 2;\n```\n\nTo fix this error, please check that this type implements this binary\noperation. Example:\n\n```\nlet x = 12u32; // the `u32` type does implement it:\n               // https://doc.rust-lang.org/stable/std/ops/trait.Shl.html\n\nx << 2; // ok!\n```\n\nIt is also possible to overload most operators for your own type by\nimplementing traits from `std::ops`.\n\nString concatenation appends the string on the right to the string on the\nleft and may require reallocation. This requires ownership of the string\non the left. If something should be added to a string literal, move the\nliteral to the heap by allocating it with `to_owned()` like in\n`\"Your text\".to_owned()`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\thier\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\assert_approx_eq-1.1.0\\src\\lib.rs","byte_start":763,"byte_end":765,"line_start":25,"line_end":25,"column_start":14,"column_end":16,"is_primary":false,"text":[{"text":"            (*a - *b).abs() < eps,","highlight_start":14,"highlight_end":16}],"label":"matrix::Matrix","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\matrix.rs","byte_start":20196,"byte_end":20243,"line_start":682,"line_end":682,"column_start":9,"column_end":56,"is_primary":false,"text":[{"text":"        assert_approx_eq!(matrix_b, matrix_a.inverse());","highlight_start":9,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_approx_eq!","def_site_span":{"file_name":"C:\\Users\\thier\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\assert_approx_eq-1.1.0\\src\\lib.rs","byte_start":613,"byte_end":642,"line_start":20,"line_end":20,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! assert_approx_eq {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\thier\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\assert_approx_eq-1.1.0\\src\\lib.rs","byte_start":768,"byte_end":770,"line_start":25,"line_end":25,"column_start":19,"column_end":21,"is_primary":false,"text":[{"text":"            (*a - *b).abs() < eps,","highlight_start":19,"highlight_end":21}],"label":"matrix::Matrix","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\matrix.rs","byte_start":20196,"byte_end":20243,"line_start":682,"line_end":682,"column_start":9,"column_end":56,"is_primary":false,"text":[{"text":"        assert_approx_eq!(matrix_b, matrix_a.inverse());","highlight_start":9,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_approx_eq!","def_site_span":{"file_name":"C:\\Users\\thier\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\assert_approx_eq-1.1.0\\src\\lib.rs","byte_start":613,"byte_end":642,"line_start":20,"line_end":20,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! assert_approx_eq {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\thier\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\assert_approx_eq-1.1.0\\src\\lib.rs","byte_start":766,"byte_end":767,"line_start":25,"line_end":25,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"            (*a - *b).abs() < eps,","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\matrix.rs","byte_start":20196,"byte_end":20243,"line_start":682,"line_end":682,"column_start":9,"column_end":56,"is_primary":false,"text":[{"text":"        assert_approx_eq!(matrix_b, matrix_a.inverse());","highlight_start":9,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_approx_eq!","def_site_span":{"file_name":"C:\\Users\\thier\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\assert_approx_eq-1.1.0\\src\\lib.rs","byte_start":613,"byte_end":642,"line_start":20,"line_end":20,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! assert_approx_eq {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"an implementation of `Sub` might be missing for `matrix::Matrix`","code":null,"level":"note","spans":[{"file_name":"src\\matrix.rs","byte_start":1050,"byte_end":1067,"line_start":28,"line_end":28,"column_start":1,"column_end":18,"is_primary":true,"text":[{"text":"pub struct Matrix {","highlight_start":1,"highlight_end":18}],"label":"must implement `Sub`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the trait `Sub` must be implemented","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\thier\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\ops\\arith.rs","byte_start":4785,"byte_end":4810,"line_start":184,"line_end":184,"column_start":1,"column_end":26,"is_primary":true,"text":[{"text":"pub trait Sub<Rhs = Self> {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0369]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot subtract `matrix::Matrix` from `matrix::Matrix`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\matrix.rs:682:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m682\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        assert_approx_eq!(matrix_b, matrix_a.inverse());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmatrix::Matrix\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmatrix::Matrix\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: an implementation of `Sub` might be missing for `matrix::Matrix`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\matrix.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Matrix {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mmust implement `Sub`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the trait `Sub` must be implemented\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\thier\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\ops\\arith.rs:184:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Sub<Rhs = Self> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `assert_approx_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"cannot subtract `matrix::Matrix` from `matrix::Matrix`","code":{"code":"E0369","explanation":"A binary operation was attempted on a type which doesn't support it.\n\nErroneous code example:\n\n```compile_fail,E0369\nlet x = 12f32; // error: binary operation `<<` cannot be applied to\n               //        type `f32`\n\nx << 2;\n```\n\nTo fix this error, please check that this type implements this binary\noperation. Example:\n\n```\nlet x = 12u32; // the `u32` type does implement it:\n               // https://doc.rust-lang.org/stable/std/ops/trait.Shl.html\n\nx << 2; // ok!\n```\n\nIt is also possible to overload most operators for your own type by\nimplementing traits from `std::ops`.\n\nString concatenation appends the string on the right to the string on the\nleft and may require reallocation. This requires ownership of the string\non the left. If something should be added to a string literal, move the\nliteral to the heap by allocating it with `to_owned()` like in\n`\"Your text\".to_owned()`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\thier\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\assert_approx_eq-1.1.0\\src\\lib.rs","byte_start":984,"byte_end":986,"line_start":31,"line_end":31,"column_start":14,"column_end":16,"is_primary":false,"text":[{"text":"            (*a - *b).abs()","highlight_start":14,"highlight_end":16}],"label":"matrix::Matrix","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\matrix.rs","byte_start":20196,"byte_end":20243,"line_start":682,"line_end":682,"column_start":9,"column_end":56,"is_primary":false,"text":[{"text":"        assert_approx_eq!(matrix_b, matrix_a.inverse());","highlight_start":9,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_approx_eq!","def_site_span":{"file_name":"C:\\Users\\thier\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\assert_approx_eq-1.1.0\\src\\lib.rs","byte_start":613,"byte_end":642,"line_start":20,"line_end":20,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! assert_approx_eq {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\thier\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\assert_approx_eq-1.1.0\\src\\lib.rs","byte_start":989,"byte_end":991,"line_start":31,"line_end":31,"column_start":19,"column_end":21,"is_primary":false,"text":[{"text":"            (*a - *b).abs()","highlight_start":19,"highlight_end":21}],"label":"matrix::Matrix","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\matrix.rs","byte_start":20196,"byte_end":20243,"line_start":682,"line_end":682,"column_start":9,"column_end":56,"is_primary":false,"text":[{"text":"        assert_approx_eq!(matrix_b, matrix_a.inverse());","highlight_start":9,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_approx_eq!","def_site_span":{"file_name":"C:\\Users\\thier\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\assert_approx_eq-1.1.0\\src\\lib.rs","byte_start":613,"byte_end":642,"line_start":20,"line_end":20,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! assert_approx_eq {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\thier\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\assert_approx_eq-1.1.0\\src\\lib.rs","byte_start":987,"byte_end":988,"line_start":31,"line_end":31,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"            (*a - *b).abs()","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\matrix.rs","byte_start":20196,"byte_end":20243,"line_start":682,"line_end":682,"column_start":9,"column_end":56,"is_primary":false,"text":[{"text":"        assert_approx_eq!(matrix_b, matrix_a.inverse());","highlight_start":9,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_approx_eq!","def_site_span":{"file_name":"C:\\Users\\thier\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\assert_approx_eq-1.1.0\\src\\lib.rs","byte_start":613,"byte_end":642,"line_start":20,"line_end":20,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! assert_approx_eq {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"an implementation of `Sub` might be missing for `matrix::Matrix`","code":null,"level":"note","spans":[{"file_name":"src\\matrix.rs","byte_start":1050,"byte_end":1067,"line_start":28,"line_end":28,"column_start":1,"column_end":18,"is_primary":true,"text":[{"text":"pub struct Matrix {","highlight_start":1,"highlight_end":18}],"label":"must implement `Sub`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the trait `Sub` must be implemented","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\thier\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\ops\\arith.rs","byte_start":4785,"byte_end":4810,"line_start":184,"line_end":184,"column_start":1,"column_end":26,"is_primary":true,"text":[{"text":"pub trait Sub<Rhs = Self> {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0369]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot subtract `matrix::Matrix` from `matrix::Matrix`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\matrix.rs:682:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m682\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        assert_approx_eq!(matrix_b, matrix_a.inverse());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmatrix::Matrix\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmatrix::Matrix\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: an implementation of `Sub` might be missing for `matrix::Matrix`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\matrix.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Matrix {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mmust implement `Sub`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the trait `Sub` must be implemented\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\thier\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\ops\\arith.rs:184:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Sub<Rhs = Self> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `assert_approx_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 2 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0369`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0369`.\u001b[0m\n"}
